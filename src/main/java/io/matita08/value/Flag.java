package io.matita08.value;

import io.matita08.Utils;

public class Flag {
   private boolean defined;
   private boolean value;
   
   /**
    * Creates a new Flag in the undefined state.
    *
    * The flag has no explicit boolean value until {@link #set(boolean)} is called;
    * calls to {@link #get()} will return a nondeterministic value until then.
    */
   public Flag(){
      defined = false;
   }
   
   /**
    * Creates a Flag marked as defined with the given boolean value.
    *
    * @param value the boolean value to assign to the flag (must be non-null)
    * @throws NullPointerException if {@code value} is {@code null}
    */
   public Flag(Boolean value){
      defined = true;
      this.value = value;
   }
   
   /**
    * Returns whether this Flag has an explicit value.
    *
    * @return true if the flag is defined (has been set or constructed with a value), false if it is undefined
    */
   public boolean isDefined() {
      return defined;
   }
   
   /**
    * Set the flag's value and mark it as defined.
    *
    * @param v the boolean value to assign to this flag
    */
   public void set(boolean v) {
      defined = true;
      value = v;
   }
   
   /**
    * Returns the flag's boolean value if it has been defined; otherwise returns a random boolean.
    *
    * <p>If this Flag is defined (isDefined() == true) the stored value is returned. If it is
    * undefined, the result is generated by {@code Utils.rng.nextBoolean()}.
    *
    * @return the defined value, or a random boolean when undefined
    */
   public boolean get() {
      return defined ? value : Utils.rng.nextBoolean();
   }
   
   /**
 * Compares this flag with another for equality.
 *
 * Returns true when both flags have the same defined state and, if defined, the same boolean value.
 *
 * @param other the flag to compare with
 * @return true if the two flags are equal in defined-state and value; false otherwise
 */
public boolean comp(Flag other){return equals(other);}
   
   /**
    * Compares this Flag to another object for equality.
    *
    * Returns true if the other object is the same instance or is a Flag with the same
    * defined state and boolean value.
    *
    * @param o the object to compare with
    * @return true if {@code o} is a Flag with identical {@code defined} and {@code value}, otherwise false
    */
   @Override
   public final boolean equals(Object o) {
      if(this == o) return true;
      if(!(o instanceof Flag flag)) return false;
      return defined == flag.defined && value == flag.value;
   }
   
   /**
    * Returns true if this flag is defined and its value equals the given boolean.
    *
    * @param o the boolean to compare against this flag's value
    * @return true if the flag is defined and its value equals {@code o}; false if undefined or values differ
    */
   public final boolean equals(boolean o) {
      return defined && value == o;
   }
   
   /**
    * Computes a hash code for this Flag based on its defined state and value.
    *
    * The result is derived from both the {@code defined} and {@code value} fields so
    * that it is consistent with {@link #equals(Object)}.
    *
    * @return an integer hash code suitable for use in hash-based collections
    */
   @Override
   public int hashCode() {
      int result = Boolean.hashCode(defined);
      result = 31 * result + Boolean.hashCode(value);
      return result;
   }
   
   /**
    * Returns a short string representation of the flag.
    *
    * <p>Produces "1" if the flag is defined and true, "0" if defined and false,
    * and "?" if the flag is not defined.</p>
    *
    * @return "1", "0", or "?" as described above
    */
   @Override
   public String toString() {
      return defined ? (value ? "1" : "0") : "?";
   }
   
}
